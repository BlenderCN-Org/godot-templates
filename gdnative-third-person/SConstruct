#!/usr/bin/env python

import importlib
import os
import platform
import sys
import SCons

# Nuclex SCons libraries
sys.path.append('addons/scripts/scons')
nuclex = importlib.import_module('nuclex')
godot_cpp = importlib.import_module('godot-cpp') # Special module to compile Godot-CPP

# To understand this:
#
# SCons is not an imperative build language where you simply state "do X, then do Y".
# Instead, all these commands tell SCons stuff like "inputs A&B go through tool X and
# produce output Y". SCons then builds a graph of what builds what (you can view
# the dependency tree by calling SCons with --tree=all).
#
# So a good SCons script completely and accurately tells SCons all tools involved
# with every input and output. Called with -j8 (8 = number of CPU cores), SCons will
# parallelize the heck out of the build, doing everything in parallel that possibly can.

# ----------------------------------------------------------------------------------------------- #

# 1. Export all Blender models to Collada
#
# This recursively looks for SConstruct files in all subdirectories of the 'Game'
# directory and builds them with SCons. Since SCons keeps track of all inputs and
# generated outputs, this will intelligently only process changed files.
#
environment = nuclex.create_generic_environment()
nuclex.build_all(environment, 'Game')


# 2. Compile Godot-CPP, a wrapper library we require
#
# Big issue: the SConstruct file of Godot-CPP is not suitable for calling
# via env.SConscript(). It also generates some headers, which our example-cpp
# build needs in place before it starts compiling
# (but lacking an exact list of the generated files, SCons is unaware)
#
godot_cpp_directory = os.path.join('addons', 'godot-cpp')
godot_cpp.check_godot_headers_directory(environment, godot_cpp_directory)

godot_environment = nuclex.create_godot_environment()
godot_cpp.generate_gdnative_api_json(godot_environment, godot_cpp_directory)

cplusplus_environment = nuclex.create_cplusplus_environment()
compile_godot_cpp = godot_cpp.compile(cplusplus_environment, godot_cpp_directory)


# 3. Compile the GDnative library specific to this game
#
# If the library output path for Godot-CPP above was set correctly,
# this will only trigger after the Godot-CPP has been built. If not, well,
# you'll get an error about a missing library here...
#
example_cpp_directory = os.path.join('addons', 'example-cpp')
example_cpp_sconstruct = os.path.join(example_cpp_directory, 'SConstruct')

compile_game_logic = environment.SConscript(example_cpp_sconstruct)


# 4. Force steps 2 and 3 to run sequentially
#
# Remember the big issue with SCons not knowing that step 3 depends on
# headers generated in step 2? We could either ship a complete list of
# the headers and declare them an 'env.SideEffect'...
#
# ...or we just do a little hack: we declare that Config.h (a header
# included by all example-cpp sources) depends on the build script from
# step 2.
example_cpp_config_h = os.path.join(example_cpp_directory, 'Source', 'Config.h')
Depends(example_cpp_config_h, compile_godot_cpp)

#Depends(compile_game_logic, compile_godot_cpp)
#Depends(example_cpp_directory, godot_cpp_directory)

# ----------------------------------------------------------------------------------------------- #
